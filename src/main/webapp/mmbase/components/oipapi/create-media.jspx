<mm:content
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0"
          >
  <jsp:output omit-xml-declaration="true" />
    
    <!-- POST : creates media nodes with url -->

    
    <mm:import externid="apikey" />
    <mm:import externid="url" />
    <mm:import externid="type" />
    <mm:import externid="license">cc-by-sa</mm:import>
    <!-- possible keys and their licenses in Open Images: 
    cc-by-sa     Creative Commons - Naamsvermelding-Gelijk delen
    cc-by        Creative Commons - Naamsvermelding
    cc-by-nc     Creative Commons – Naamsvermelding-Niet-commercieel
    cc-by-nc-sa  Creative Commons – Naamsvermelding-Niet-commercieel-Gelijk delen
    cc-by-nd     Creative Commons – Naamsvermelding-Geen Afgeleide werken
    cc-by-nc-nd  Creative Commons – Naamsvermelding-Niet-commercieel-Geen Afgeleide werken
    cc0          Publiek Domein        -->
    <!-- mm:log level="info">lic: ${license} </mm:log -->

    <mm:escaper type="tagstripper" id="striptags">
      <mm:param name="tags">none</mm:param>
    </mm:escaper>
    

    <c:choose>
      <c:when test="${empty apikey}">
        <!-- jsp:scriptlet> response.setStatus(400); </jsp:scriptlet -->
        <meta status="400">Bad request - No apikey.</meta>
        <response />
      </c:when>
      <c:when test="${empty url}">
        <!-- jsp:scriptlet> response.setStatus(400); </jsp:scriptlet -->
        <meta status="400">Bad request - No url.</meta>
        <response />
      </c:when>
      <c:otherwise>
        
        <!-- write apikey to request from where it's picked up by eu.openimages.Autenthication -->
        <mm:write referid="apikey" request="apikey" />

        <c:catch var="exc"> 
          <!-- try and login with apikey, catch exception -->
          <mm:cloud method="delegate" authenticate="apikey">

            <mm:maycreate type="$type" inverse="true">
              <meta status="401">Unauthorized - You are not allowed to create this type (${type}) of node.</meta>
            </mm:maycreate>

            <mm:maycreate type="$type">
              <mm:form mode="validate">
                  
                  <mm:createnode type="$type" commitonclose="false" id="new_node">
                    
                    <mm:import id="err">
                      <mm:fieldlist type="edit" varStatus="field">
                        <c:if test="${field.current.state eq 2}">
                          <!-- state persistent 
                            public int getState()
                            Returns this field's state identifier (virtual, persistent, system, systemvirtual).
                            http://www.mmbase.org/development/api/1.9/constant-values.html#org.mmbase.bridge.Field.STATE_VIRTUAL
                          -->
                          <mm:fieldinfo type="name" id="fldname" write="false" />
                          <mm:import externid="$fldname" />
                          <mm:write referid="$fldname">
                            <mm:isnotempty><mm:setfield name="$fldname"><mm:write referid="$fldname" /></mm:setfield></mm:isnotempty>
                          </mm:write>
                          <field name="${fldname}"><mm:fieldinfo type="errors" escape="striptags" /></field>
                        </c:if>
                      </mm:fieldlist>
                    </mm:import>
                    
                  </mm:createnode>
                
                  <!-- mm:valid inverse="true">
                    <mm:cancel />
                  </mm:valid -->
                  <mm:valid>
                    <mm:commit />
                    <mm:import id="committed" />
                  </mm:valid>

              </mm:form>
                                
              <!-- 2nd part -->
              <mm:present referid="committed">
                
                <mm:node number="$new_node" id="mediafr" />
                
                <mm:listnodescontainer type="licenses">
                  <mm:constraint field="licensekey" value="$license" operator="EQUAL" />
                  <mm:maxnumber value="1" />
                  <mm:listnodes>
                    <mm:node number="$_node" id="licensenode" />
                  </mm:listnodes>
                </mm:listnodescontainer>
                <mm:notpresent referid="licensenode">
                  <mm:node number="licenses_attributionsharealike" id="licensenode" />
                </mm:notpresent>
                <mm:createrelation source="mediafr" destination="licensenode" role="related" />
                
                <!-- download media from url -->
                <mm:node number="$mediafr">
                  <mm:import id="source_url">
                    <mm:functioncontainer>
                      <mm:param name="url">${url}</mm:param>
                      <mm:function name="downloadmedia" />
                    </mm:functioncontainer>
                  </mm:import>
                </mm:node>
                
                <mm:import id="buffer">
                  <!-- the actual OK response -->
                  <meta status="200">OK</meta>
                  <response>
                    <mm:node number="$mediafr">
                      <type><mm:nodeinfo type="type" /></type>
                      <number><mm:field name="number" /></number>
                      <source_url>${source_url}</source_url>
                      <node number="${_node.number}">
                        <mm:fieldlist type="edit">
                          <c:set var="fieldname"><mm:fieldinfo type="name" /></c:set>
                          <field name="${fieldname}"><mm:fieldinfo type="value" /></field>
                        </mm:fieldlist>
                      </node>
                    </mm:node>
                  </response>
                </mm:import>
              </mm:present><!-- /committed -->
 
            </mm:maycreate>
          </mm:cloud>
        </c:catch>

        <c:choose>
          <c:when test="${!empty exc}"> <!-- apperently an exception, show message if possible -->
            <!-- jsp:scriptlet>response.setStatus(500); </jsp:scriptlet -->
            <meta status="500">Error</meta>
            <response>${exc} ${err} ${buffer}</response>
          </c:when>
          <c:when test="${!empty buffer}">
            <mm:write referid="buffer" escape="none" />
          </c:when>
          <c:when test="${!empty err}">
            <meta status="400">Bad request - Field validation error</meta>
            <response>
              <mm:write referid="err" escape="none" /> 
              <c:if test="${!empty exc}"><exc>${exc}</exc></c:if>
            </response>
          </c:when>
          <c:otherwise>
            <!-- jsp:scriptlet>response.setStatus(401); </jsp:scriptlet -->
            <meta status="401">Unauthorized - Failed to login.</meta>
            <response>${exc}</response>
          </c:otherwise>
        </c:choose><!-- end checking for errors -->

      </c:otherwise>
    </c:choose><!-- /apikey, url -->


</mm:content>
