<mm:content
    type="application/xml"
    postprocessor="none"
    expires="120"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:fn="http://java.sun.com/jsp/jstl/functions"
    xmlns:jsp="http://java.sun.com/JSP/Page"
    xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0">
  <jsp:directive.page session="false" />
  <!--
  examples of use:
    feeds/oai/?verb=Identify
    feeds/oai/?verb=ListSets
    feeds/oai/?verb=ListIdentifiers&metadataPrefix=oai_dc
    feeds/oai/?verb=ListRecords&metadataPrefix=oai_dc&set=beeldengeluid
    feeds/oai/?verb=ListRecords&metadataPrefix=oai_dc&from=2009-01-01
    feeds/oai/?verb=GetRecord&identifier=oai:openimages.eu:23173
    
  version: '$Id$'
  -->
  <mm:cloud>
    <mm:import id="requesturl"><c:out value="${pageContext.request.requestURL}" /><c:if test="${!empty pageContext.request.queryString}">?<c:out value="${pageContext.request.queryString}" /></c:if></mm:import>
    <mm:import id="max">100</mm:import>
    <mm:import id="offset">0</mm:import>
  
    <mm:import externid="verb" />
    <c:if test="${!empty verb
              and verb ne 'Identify' 
              and verb ne 'ListMetadataFormats' 
              and verb ne 'ListSets'
              and verb ne 'ListIdentifiers'
              and verb ne 'ListRecords'
              and verb ne 'GetRecord'}">
      <c:set var="error" value="badVerb" />
    </c:if>
    
    <mm:import externid="identifier" />
    <mm:import externid="metadataPrefix" />
    <mm:import externid="set" />
    
    <mm:escaper type="tagstripper" id="tagstripper" /><!-- to strip html -->
    
    <!-- An OAI-PMH set is based on a portal. Default portal with all content is 'openimages', 
         other portals can be found by a pools property key 'oai-set' with the name of a set, 
         f.e. 'beeldengeluid', as its value. The property points to a portal pools node.
         Portals are configured with a portal filter that is being used in a Lucene query.
         A filter contains users, keywords and tags.
    -->
    <mm:import id="setnamelist">openimages</mm:import>
    <mm:listnodescontainer type="properties">
      <mm:constraint field="key" value="oai-set" operator="EQUAL" />
      <mm:listnodes id="set_props">
        <mm:import id="setnamelist" reset="true">${setnamelist},<mm:field name="value" /></mm:import>
      </mm:listnodes>
    </mm:listnodescontainer>
    
    <mm:import externid="from" /><!-- 1998-01-15 -->
    <mm:present referid="from">
      <mm:compare referid="from" regexp="[0-9]{4}-[0-9]{2}-[0-9]{2}">
        <mm:time inputformat="yyyy-MM-dd" time="$from" precision="days" id="start" write="false" />
      </mm:compare>
      <mm:compare referid="from" regexp="[0-9]{4}-[0-9]{2}-[0-9]{2}" inverse="true">
        <c:set var="error" value="badArgument" />
        <c:set var="kind" value="from incorrect" />
      </mm:compare>
    </mm:present>
    <mm:import externid="until" />
    <mm:present referid="until">
      <mm:compare referid="until" regexp="[0-9]{4}-[0-9]{2}-[0-9]{2}">
        <mm:time inputformat="yyyy-MM-dd" time="$until" precision="days" id="end" write="false" />
      </mm:compare>
      <mm:compare referid="until" regexp="[0-9]{4}-[0-9]{2}-[0-9]{2}" inverse="true">
        <c:set var="error" value="badArgument" />
        <c:set var="kind" value="until incorrect" />
      </mm:compare>
    </mm:present>
    
    <!-- resumptionToken, looks like: !f1969-07-21!u2003-08-18!oai_dc!200 (index starts at 0) -->
    <mm:import externid="resumptionToken" />
    <c:choose>
      <c:when test="${!empty resumptionToken}">
        
        <c:if test="${!empty from or !empty until or !empty set}">
          <c:set var="error" value="badArgument" />
          <c:set var="kind" value="have resumptionToken but from not empty or until not empty or set not empty" />
        </c:if>
        <mm:compare referid="resumptionToken" inverse="true"
            regexp="(?i)!f([0-9]{4}-[0-9]{2}-[0-9]{2})?!u([0-9]{4}-[0-9]{2}-[0-9]{2})?!(oai_dc|oai_oi)?![0-9]+">
          <c:set var="error" value="badResumptionToken" />
          <c:set var="kind" value="no match with regexp" />
        </mm:compare>
        
        <c:set var="tokens" value="${fn:split(resumptionToken, '!')}" />
        <c:choose>
          <c:when test="${empty metadataPrefix}"><!-- XXX: without it not valid ?! -->
            <!-- <c:set var="error" value="badResumptionToken" />
            <c:set var="kind" value=" No metadataPrefix in ${requesturl}, so we can not construct a valid resumptionToken." /> -->
          </c:when>
          <c:when test="${fn:length(tokens) eq 4}">
            <c:set var="tfrom"  value="${fn:substringAfter(tokens[0], 'f')}" />
            <c:set var="tuntil" value="${fn:substringAfter(tokens[1], 'u')}" />
            <c:choose>
              <c:when test="${!empty tfrom}">
                <mm:import id="start" reset="true"><mm:time inputformat="yyyy-MM-dd" time="${tfrom}" precision="days" /></mm:import>
              </c:when>
              <c:otherwise>
                <!-- <c:set var="error" value="badResumptionToken" />
                <c:set var="kind" value="from" /> -->
              </c:otherwise>
            </c:choose>
            <c:choose>
              <c:when test="${!empty tuntil}">
                <mm:import id="end" reset="true"><mm:time inputformat="yyyy-MM-dd" time="${tuntil}" precision="days" /></mm:import>
              </c:when>
              <c:otherwise>
                <!-- <c:set var="error" value="badResumptionToken" />
                <c:set var="kind" value="untill" /> -->
              </c:otherwise>
            </c:choose>
            <mm:import id="metadataPrefix" reset="true">${tokens[2]}</mm:import>
            <mm:import id="offset" reset="true">${tokens[3]}</mm:import>
          </c:when>
          <c:otherwise>
            <c:set var="error" value="badResumptionToken" />
          </c:otherwise>
        </c:choose>
        
      </c:when>
      <c:otherwise>
        <c:if test="${empty metadataPrefix 
                        and (verb eq 'ListIdentifiers' or verb eq 'ListRecords' or verb eq 'GetRecord')}">
          <c:set var="error" value="badArgument" />
          <c:set var="kind" value="metadataPrefix empty and other arguments include ListIdentifiers, ListRecords or GetRecord" />
        </c:if>
      </c:otherwise>
    </c:choose>
    
    <!-- get nodenumber from identifier, f.e. oai:openimages.eu:746 -->
    <mm:import id="record" />
    <c:if test="${!empty identifier}">
      <c:set var="pieces" value="${fn:split(identifier, ':')}" />
      <c:set var="len" value="${fn:length(pieces)}" />
      <mm:import id="record" reset="true">${pieces[len - 1]}</mm:import>
    </c:if>
    
    <!-- metadataPrefix -->
    <c:choose>
      <c:when test="${!empty resumptionToken 
                        and (verb eq 'ListRecords' or verb eq 'ListIdentifiers') 
                        and !empty metadataPrefix}">
        <!-- metadataPrefix should be empty when ListRecords or ListIdentifiers includes a resumptionToken -->
        <c:set var="error" value="badArgument" />
        <c:set var="kind" value="metadataPrefix and resumptionToken in same request not possible" />
      </c:when>
      <c:otherwise> 
        <c:if test="${empty resumptionToken 
                        and (verb eq 'ListIdentifiers' or verb eq 'ListRecords' or verb eq 'GetRecord') 
                        and metadataPrefix ne 'oai_dc' 
                        and metadataPrefix ne 'oai_oi'}">
          <c:set var="error" value="badArgument" />
          <c:set var="kind" value="metadataPrefix '${metadataPrefix}' incorrect or missing" />
        </c:if>      
      </c:otherwise>
    </c:choose>    

    <!-- check set parameter with setnamelist-->
    <c:choose>
      <c:when test="${!empty set}">
        <mm:compare referid="set" valueset="$setnamelist" inverse="true">
          <c:set var="error" value="badArgument" />
          <c:set var="kind" value="unknown set '${set}'" />
        </mm:compare>
      </c:when>
      <c:otherwise>
        <!-- <c:set var="set" value="openimages" /> -->
      </c:otherwise>
    </c:choose>
  
    <!-- default verb -->
    <c:if test="${empty verb}"><c:set var="verb">Identify</c:set></c:if>

    <OAI-PMH 
      xmlns="http://www.openarchives.org/OAI/2.0/" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
      
      <responseDate>
        <mm:time format="yyyy-MM-dd" time="now" />T<mm:time format="HH:mm:ss" time="now" />Z
      </responseDate>
  
      <!-- errors and Identify -->
      <c:choose>
        <c:when test="${error eq 'badVerb'}">
          <request>${requesturl}</request>
          <error code="badVerb">
            Value of the verb argument is not a legal OAI-PMH verb, the verb argument is missing, or the verb argument is repeated.
          </error>
        </c:when>
        <c:when test="${error eq 'badArgument'}">
          <request>${requesturl}</request>
          <error code="badArgument">
            The request includes illegal arguments, is missing required arguments, includes a repeated argument, or values for arguments have an illegal syntax.
            [${kind}]
          </error>
        </c:when>
        <c:when test="${error eq 'badResumptionToken'}">
          <request>${requesturl}</request>
          <error code="badResumptionToken">
            The value of the resumptionToken argument is invalid or expired.
            [${kind}]
          </error>
        </c:when>
        <c:when test="${verb eq 'Identify'}">
          <request verb="${verb}">${requesturl}</request>
          <Identify>
            <repositoryName>Open Images Platform</repositoryName>
            <baseURL><mm:url page="/" absolute="true" /></baseURL>
            <protocolVersion>2.0</protocolVersion>
            <adminEmail>info@openimages.eu</adminEmail>
            <earliestDatestamp>1919-01-01</earliestDatestamp>
            <deletedRecord>no</deletedRecord>
            <granularity>YYYY-MM-DD</granularity>
            <description>
              <oai-identifier xmlns="http://www.openarchives.org/OAI/2.0/oai-identifier" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai-identifier http://www.openarchives.org/OAI/2.0/oai-identifier.xsd">
                <scheme>oai</scheme>
                <repositoryIdentifier>openimages.eu</repositoryIdentifier>
                <delimiter>:</delimiter>
                <sampleIdentifier>oai:openimages.eu:23173</sampleIdentifier>
              </oai-identifier>
            </description>
          </Identify>
        </c:when>
        
        <!-- ListSets -->
        <c:when test="${verb eq 'ListSets'}">
          <request verb="${verb}">${requesturl}</request>
          <ListSets>

            <mm:listnodescontainer type="properties">
              <mm:constraint field="key" value="oai-set" operator="EQUAL" />
              <mm:listnodes>
                <set>
                  <setSpec><mm:field name="value" /></setSpec>
                  <mm:import id="prop" reset="true"><mm:field name="parent" /></mm:import>
                  <mm:node number="$prop">
                    <setName><mm:field name="name" /></setName>
                    <setDescription>
                    <oai_dc:dc 
                      xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" 
                      xmlns:dc="http://purl.org/dc/elements/1.1/" 
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                      xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
                        <dc:description>
                          <mm:field name="description" escape="tagstripper,text/xml" />
                        </dc:description>
                      </oai_dc:dc>
                    </setDescription>
                  </mm:node>
                </set>
              </mm:listnodes>
            </mm:listnodescontainer>

          </ListSets>
        </c:when>
        
        <!-- ListIdentifiers + ListRecords -->
        <c:when test="${verb eq 'ListIdentifiers' or verb eq 'ListRecords'}">
        
          <!-- but first the request -->
          <c:choose>
            <c:when test="${!empty resumptionToken}">
              
              <c:choose>
                <c:when test="${!empty set and !empty metadataPrefix}"> <!-- both present -->
                  <request set="${set}" metadataPrefix="${metadataPrefix}" 
                      verb="${verb}" resumptionToken="${resumptionToken}">${requesturl}</request>
                </c:when>
                <c:when test="${empty set and !empty metadataPrefix}">  <!-- no set -->
                  <request metadataPrefix="${metadataPrefix}" 
                      verb="${verb}" resumptionToken="${resumptionToken}">${requesturl}</request>
                </c:when>
                <c:when test="${!empty set and empty metadataPrefix}">  <!-- no metadataPrefix -->
                  <request set="${set}" 
                      verb="${verb}" resumptionToken="${resumptionToken}">${requesturl}</request>
                </c:when>
                <c:otherwise>                                           <!-- both missing -->
                  <request verb="${verb}" resumptionToken="${resumptionToken}">${requesturl}</request>
                </c:otherwise>
              </c:choose>
              
            </c:when>
            <c:when test="${!empty from and !empty until}">
              
              <c:choose>
                <c:when test="${!empty set}">
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      set="${set}" from="${from}" until="${until}">${requesturl}</request>
                </c:when>
                <c:otherwise>
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      from="${from}" until="${until}">${requesturl}</request>
                </c:otherwise>
              </c:choose>
              
            </c:when>
            <c:when test="${!empty from and empty until}">
              
              <c:choose>
                <c:when test="${!empty set}">
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      set="${set}" from="${from}">${requesturl}</request>
                </c:when>
                <c:otherwise>
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      from="${from}">${requesturl}</request>
                </c:otherwise>
              </c:choose>
                  
            </c:when>
            <c:when test="${empty from and !empty until}">
              
              <c:choose>
                <c:when test="${!empty set}">
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      set="${set}" until="${until}">${requesturl}</request>
                </c:when>
                <c:otherwise>
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}" 
                      until="${until}">${requesturl}</request>
                </c:otherwise>
              </c:choose>
              
            </c:when>
            <c:otherwise>
              
              <c:choose>
                <c:when test="${!empty set}">
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}"
                      set="${set}">${requesturl}</request>
                </c:when>
                <c:otherwise>
                  <request verb="${verb}" metadataPrefix="${metadataPrefix}">${requesturl}</request>
                </c:otherwise>
              </c:choose>
              
            </c:otherwise>
          </c:choose>
      
      
      <!-- Lucene query configuration to create list based on set -->
      <c:choose>
        <c:when test="${!empty set}">

          <!-- get this set's portal -->
          <mm:listnodescontainer type="properties">
            <mm:constraint field="key" value="oai-set" operator="EQUAL" />
            <mm:constraint field="value" value="${set}" operator="EQUAL" />
            <mm:maxnumber value="1" />
            <mm:listnodes>
              <mm:field name="parent" id="portal" write="false" />
            </mm:listnodes>
          </mm:listnodescontainer>

          <mm:hasnode number="$portal">
            <mm:node number="$portal">
  
              <!-- set portal manager as default user -->
              <mm:relatednodescontainer type="mmbaseusers" role="portalrel" searchdirs="source">
                <mm:maxnumber value="1" />
                <mm:relatednodes>
                  <c:set var="p_users">user:"<mm:field name="username" />"</c:set>
                </mm:relatednodes>
              </mm:relatednodescontainer>
  
              <!-- portal filter: users, tags, keywords -->
              <mm:relatednodescontainer type="filters" role="portalrel" searchdirs="destination">
                <mm:relatednodes>
                  <mm:field name="users" escape="none">
                    <mm:isnotempty>
                      <c:forTokens items="${_}" delims=";" var="usr">
                        <c:set var="p_users">${p_users}<jsp:text> </jsp:text>user:"<c:out value="${fn:trim(usr)}" />"</c:set>
                      </c:forTokens>
                    </mm:isnotempty>
                  </mm:field>
                  <mm:field name="keywords" escape="none">
                    <mm:isnotempty>
                      <c:forTokens items="${_}" delims=";" var="kw">
                        <c:set var="p_keywords">${p_keywords}<jsp:text> </jsp:text>keywords:"<c:out value="${fn:trim(kw)}" />"</c:set>
                      </c:forTokens>
                    </mm:isnotempty>
                  </mm:field>
                  <mm:field name="tags" escape="none">
                    <mm:isnotempty>
                      <c:forTokens items="${_}" delims=";" var="tag">
                        <c:set var="p_tags">${p_tags}<jsp:text> </jsp:text>tags:"<c:out value="${fn:trim(tag)}" />"</c:set>
                      </c:forTokens>
                    </mm:isnotempty>
                  </mm:field>
                </mm:relatednodes>
              </mm:relatednodescontainer>
            </mm:node>
          </mm:hasnode>

          <mm:import id="value">
            <c:if test="${!empty p_keywords or !empty p_tags or !empty p_users}">+(${p_keywords} ${p_tags} ${p_users}) -excludedportal:${portal} </c:if>
          </mm:import>

        </c:when>
        <c:otherwise>
          <!-- default portal, display latest -->
          <mm:import id="value">media*</mm:import>
          <mm:import id="fields">indexId</mm:import>
        </c:otherwise>
      </c:choose>

      <mm:import id="index">media</mm:import>
      <mm:import id="extraconstraints"></mm:import>
      <mm:import id="sortfields">REVERSE:lastmodified</mm:import>
      <mm:import id="filter">
        <c:if test="${!empty start}">lastmodified:GTE:<mm:time format="yyyyMMddHHmm" time="$start" />00</c:if>
        <c:if test="${!empty end}">${!empty start ? '+ ' : ''}lastmodified:LTE:<mm:time format="yyyyMMddHHmm" time="$end" />00</c:if>
      </mm:import>

      <mm:nodelistfunction 
          module="lucene"
          id="list"
          name="search"
          referids="index,value,offset,max,fields?,sortfields?,filter?,extraconstraints" />

      <mm:function
          module="lucene"
          id="total"
          name="searchsize"
          write="false"
          referids="index,value,fields?,filter?,extraconstraints" />          
          
          <!--
          <mm:listnodescontainer type="mediafragments">
            <mm:constraint field="show" value="true" operator="EQUAL" />
            <c:if test="${!empty start}">
              <mm:constraint field="lastmodified" value="$start" operator="GREATER_EQUAL" />
            </c:if>
            <c:if test="${!empty end}">
              <mm:constraint field="lastmodified" value="$end" operator="LESS_EQUAL" />
            </c:if>
            <mm:sortorder field="lastmodified" direction="DOWN" />
            <mm:size id="size" write="false" />
            <mm:maxnumber value="$max" />
            <mm:offset value="$offset" />
            <mm:size id="foundsome" write="false" />
            <mm:listnodes id="list" />
          </mm:listnodescontainer>
          -->
          
          
          <!-- ListIdentifiers, ListRecords and GetRecord -->
          <c:choose>
            <c:when test="${total gt 0 and verb eq 'ListIdentifiers'}">
              <ListIdentifiers>
                <mm:listnodes referid="list">
                  <jsp:include page="/feeds/inc/oai.record.header.jspx" />
                </mm:listnodes>
                <c:if test="${(offset + max) lt total}">
                  <resumptionToken
                      completeListSize="${total}" 
                      cursor="${offset}">!f${from}!u${until}!${metadataPrefix}!${offset + max}</resumptionToken>
                </c:if>
              </ListIdentifiers>
            </c:when>
            <c:when test="${total gt 0 and verb eq 'ListRecords'}">
              <ListRecords>
                <c:choose>
                  <c:when test="${metadataPrefix eq 'oai_oi'}">
                    <mm:listnodes referid="list">
                      <jsp:include page="/feeds/inc/oai.record.oai_oi.jspx">
                    	<jsp:param name="set" value="${set}" />
                      </jsp:include>
                    </mm:listnodes>
                  </c:when>
                  <c:otherwise>
                    <mm:listnodes referid="list">
                      <jsp:include page="/feeds/inc/oai.record.oai_dc.jspx">
                    	<jsp:param name="set" value="${set}" />
                      </jsp:include>
                    </mm:listnodes>
                  </c:otherwise>
                </c:choose>
                <c:if test="${(offset + max) lt total}">
                  <resumptionToken
                      completeListSize="${total}" 
                      cursor="${offset}">!f${from}!u${until}!${metadataPrefix}!${offset + max}</resumptionToken>
                </c:if>
              </ListRecords>
            </c:when>
            <c:otherwise>
              <error code="noRecordsMatch">
                The combination of the values of the from, until, set and metadataPrefix arguments results in an empty list.
                ${value}
              </error>
            </c:otherwise>
          </c:choose>
  
        </c:when>
        
        <!-- GetRecord -->
        <c:when test="${verb eq 'GetRecord'}">
         
          <request verb="${verb}" metadataPrefix="${metadataPrefix}" identifier="${identifier}">${requesturl}</request>
          
          <mm:hasnode number="${record}">
            <mm:node number="${record}">
              <c:set var="show"><mm:field name="show" /></c:set>
              <mm:nodeinfo type="type" id="nodetype" write="false" />
              <c:if test="${show eq 'true' 
                    and (nodetype eq 'mediafragments'
                    or nodetype eq 'audiofragments' 
                    or nodetype eq 'videofragments'
                    or nodetype eq 'imagefragments' 
                    or nodetype eq 'images')
                    }">
                <GetRecord>
                  <c:choose>
                    <c:when test="${metadataPrefix eq 'oai_oi'}">
                      <jsp:include page="/feeds/inc/oai.record.oai_oi.jspx">
                        <jsp:param name="set" value="${set}" />
                      </jsp:include>
                    </c:when>
                    <c:otherwise>
                      <jsp:include page="/feeds/inc/oai.record.oai_dc.jspx">
                    	<jsp:param name="set" value="${set}" />
                      </jsp:include>
                    </c:otherwise>
                  </c:choose>
                </GetRecord>
                <c:set var="foundone" value="yes" />
              </c:if>
            </mm:node>
          </mm:hasnode>
  
          <c:if test="${empty foundone}">
            <c:choose>
              <c:when test="${empty identifier}">
                <error code="badArgument">
                  The request includes illegal arguments, is missing required arguments, includes a repeated argument, or values for arguments have an illegal syntax.
                  [empty identifier]
                </error>
              </c:when>
              <c:otherwise>
                <error code="idDoesNotExist">No matching identifier</error>
              </c:otherwise>
            </c:choose>
          </c:if>
        </c:when>

        <!-- ListMetadataFormats -->
        <c:when test="${verb eq 'ListMetadataFormats'}">
          <mm:hasnode number="${record}">
            <c:set var="hasnode" value="true" />
          </mm:hasnode>
          <c:choose>
            <c:when test="${!empty identifier and empty hasnode}">
              <request>${requesturl}</request>
              <error code="badArgument">
                The request includes illegal arguments, is missing required arguments, includes a repeated argument, or values for arguments have an illegal syntax.
                [not empty identifier but no matching record]
              </error>
            </c:when>
            <c:otherwise>
              <request verb="${verb}">${requesturl}</request>
              <ListMetadataFormats>
                <metadataFormat>
                  <metadataPrefix>oai_dc</metadataPrefix>
                  <schema>http://www.openarchives.org/OAI/2.0/oai_dc.xsd</schema>
                  <metadataNamespace>http://www.openarchives.org/OAI/2.0/oai_dc/</metadataNamespace>
                </metadataFormat>
                <metadataFormat>
                  <metadataPrefix>oai_oi</metadataPrefix>
                  <schema>http://www.openbeelden.nl/feeds/oai/oai_oi.xsd</schema>
                  <metadataNamespace>http://www.openbeelden.nl/feeds/oai/</metadataNamespace>
                </metadataFormat>
              </ListMetadataFormats>
            </c:otherwise>
          </c:choose>
        </c:when>
        
        <c:otherwise>
          <request>${requesturl}</request>
          <error code="badVerb">
            Value of the verb argument is not a legal OAI-PMH verb, the verb argument is missing, or the verb argument is repeated. 
          </error>
        </c:otherwise>
      
      </c:choose>
  
      
    </OAI-PMH>
  </mm:cloud>
</mm:content>
